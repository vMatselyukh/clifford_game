var Games = require('./../../../engine/games.js');
var Point = require('./../../../engine/point.js');
var Board = Games.require('../board.js');
var Element = Games.require('../elements.js');

const assertEquals = function(expected, actual) {
    expected = String(expected)
    actual = String(actual)
    if (expected !== actual) {
        throw new Error('Expected: "' + expected + '" but was: "' + actual + '"');
    }
}

const baseTests = () => {
    baseTest();
    boardContainsTest();
    modifyBoardTest();
}

const baseTest = () => {
    var board = new Board(
        "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
        "☼A$  &   $ @&&~~H~~~~☼☼☼☼☼☼☼H☼" +
        "☼H~~~~  ######  H        &H☼H☼" +
        "☼H»     &  &&&  ##H#######H☼H☼" +
        "☼H#########     & H»  &~~~H☼H☼" +
        "☼H&$ &&@&&###H####H##H     ☼H☼" +
        "☼H $ &$   && H    & #######☼H☼" +
        "☼~~~~~~~~~~~~H    @  H~~~~~☼H☼" +
        "☼     H   & $        H@ & »☼H☼" +
        "☼ ### #############H H#####☼H☼" +
        "☼H       $ & $&    H      &☼H☼" +
        "☼H#####         H##H####() (H☼" +
        "☼H @ $$ H######### H   ######☼" +
        "☼H##    H        & H~~~~~~@&&☼" +
        "☼~~~~#####H#   ~~~~X   @@    ☼" +
        "☼         H    $   H      ~~~☼" +
        "☼   ########H  & ######H##$  ☼" +
        "☼       B   H          H     ☼" +
        "☼H    ###########H    $H#####☼" +
        "☼H###            H     H&&$&$☼" +
        "☼H& ######  ##H######» H     ☼" +
        "☼H     (      H ~~~~~##H###H ☼" +
        "☼    H########H#   $&  H&&&##☼" +
        "☼ ###H        H   +     ~~~~~☼" +
        "☼  $&H########H#########$    ☼" +
        "☼H   H    &    $ &$@         ☼" +
        "☼H  ####H######         #####☼" +
        "☼H      H      H#######H@   &☼" +
        "☼##############H       H#####☼" +
        "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼"
    );

    assertEquals("30", board.size());
    assertEquals("[1,28]", board.getHero());

    assertEquals("[21,9],[26,21],[19,25],[2,26]", board.getOtherHeroes());
    assertEquals("", board.getEnemyHeroes());
    assertEquals("[19,15],[25,18],[7,8],[24,18],[27,18]", board.getRobbers());
    assertEquals(
        "[15,4],[18,4],[3,5],[24,5],[19,7],[26,10],[28,10],[22,11],[26,13]," + 
        "[15,14],[5,17],[6,17],[9,19],[13,19],[12,21],[3,23],[6,23],[3,24]," + 
        "[2,28],[9,28],[28,2],[10,4],[17,4],[4,5],[20,7],[24,7],[25,7],[26,7]," + 
        "[2,9],[24,10],[25,10],[27,10],[15,13],[17,16],[27,16],[28,16],[11,19]," + 
        "[14,19],[26,19],[10,21],[24,21],[5,23],[10,23],[11,23],[18,23],[2,24]," + 
        "[5,24],[6,24],[8,24],[9,24],[16,25],[22,25],[8,26],[11,26],[12,26],[13,26]," + 
        "[25,27],[5,28],[12,28],[13,28],[24,2],[19,4],[23,15],[24,15],[26,16],[3,17]," + 
        "[22,21],[18,22],[7,24],[11,28]", 
        board.getClues()
    );

    assertEquals("", board.getPotions());
    assertEquals(
        "[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1]," + 
        "[11,1],[12,1],[13,1],[14,1],[24,1],[25,1],[26,1],[27,1],[28,1]," + 
        "[16,2],[17,2],[18,2],[19,2],[20,2],[21,2],[22,2],[4,3],[5,3],[6,3]," + 
        "[7,3],[9,3],[10,3],[11,3],[12,3],[13,3],[14,3],[24,3],[25,3],[26,3]," + 
        "[27,3],[28,3],[6,5],[7,5],[8,5],[9,5],[10,5],[11,5],[12,5],[13,5]," + 
        "[15,5],[16,5],[17,5],[18,5],[19,5],[20,5],[21,5],[22,5],[23,5],[2,6]," + 
        "[3,6],[4,6],[6,7],[7,7],[8,7],[9,7],[10,7],[11,7],[12,7],[13,7],[15,7]," + 
        "[27,7],[28,7],[21,8],[22,8],[24,8],[25,8],[26,8],[4,9],[5,9],[6,9],[7,9]," + 
        "[8,9],[9,9],[12,9],[13,9],[15,9],[16,9],[17,9],[18,9],[19,9],[20,9],[2,10]," + 
        "[3,10],[4,10],[6,11],[7,11],[8,11],[9,11],[10,11],[11,11],[12,11],[13,11]," + 
        "[14,11],[15,11],[16,11],[24,11],[25,11],[26,11],[27,11],[28,11],[4,13],[5,13]," + 
        "[6,13],[7,13],[8,13],[9,13],[10,13],[11,13],[17,13],[18,13],[19,13],[20,13]," + 
        "[21,13],[22,13],[24,13],[25,13],[5,15],[6,15],[7,15],[8,15],[9,15],[11,15]," + 
        "[2,16],[3,16],[9,17],[10,17],[11,17],[12,17],[13,17],[14,17],[15,17],[16,17]," + 
        "[17,17],[23,17],[24,17],[25,17],[26,17],[27,17],[28,17],[2,18],[3,18],[4,18]," + 
        "[5,18],[6,18],[17,18],[18,18],[20,18],[21,18],[22,18],[23,18],[2,20],[3,20],[4,20]," + 
        "[6,20],[7,20],[8,20],[9,20],[10,20],[11,20],[12,20],[13,20],[14,20],[15,20],[16,20]," + 
        "[17,20],[18,20],[22,20],[23,20],[24,20],[25,20],[26,20],[20,23],[21,23],[22,23]," + 
        "[23,23],[24,23],[25,23],[26,23],[10,24],[11,24],[12,24],[14,24],[15,24],[16,24]," + 
        "[17,24],[19,24],[20,24],[2,25],[3,25],[4,25],[5,25],[6,25],[7,25],[8,25],[9,25]," + 
        "[10,25],[16,26],[17,26],[19,26],[20,26],[21,26],[22,26],[23,26],[24,26],[25,26]," + 
        "[8,27],[9,27],[10,27],[11,27],[12,27],[13,27],[0,0],[1,0],[2,0],[3,0],[4,0],[5,0]," + 
        "[6,0],[7,0],[8,0],[9,0],[10,0],[11,0],[12,0],[13,0],[14,0],[15,0],[16,0],[17,0],[18,0]," + 
        "[19,0],[20,0],[21,0],[22,0],[23,0],[24,0],[25,0],[26,0],[27,0],[28,0],[29,0],[0,1]," + 
        "[29,1],[0,2],[29,2],[0,3],[29,3],[0,4],[29,4],[0,5],[29,5],[0,6],[29,6],[0,7],[29,7]," + 
        "[0,8],[29,8],[0,9],[29,9],[0,10],[29,10],[0,11],[29,11],[0,12],[29,12],[0,13],[29,13]," + 
        "[0,14],[29,14],[0,15],[29,15],[0,16],[29,16],[0,17],[29,17],[0,18],[29,18],[0,19]," + 
        "[27,19],[29,19],[0,20],[27,20],[29,20],[0,21],[27,21],[29,21],[0,22],[27,22],[29,22]," + 
        "[0,23],[27,23],[29,23],[0,24],[27,24],[29,24],[0,25],[27,25],[29,25],[0,26],[27,26]," + 
        "[29,26],[0,27],[27,27],[29,27],[0,28],[21,28],[22,28],[23,28],[24,28],[25,28],[26,28]," + 
        "[27,28],[29,28],[0,29],[1,29],[2,29],[3,29],[4,29],[5,29],[6,29],[7,29],[8,29],[9,29]," + 
        "[10,29],[11,29],[12,29],[13,29],[14,29],[15,29],[16,29],[17,29],[18,29],[19,29],[20,29]," + 
        "[21,29],[22,29],[23,29],[24,29],[25,29],[26,29],[27,29],[28,29],[29,29]", 
        board.getWalls()
    );

    assertEquals(
        "[15,1],[23,1],[1,2],[8,2],[15,2],[23,2],[1,3],[8,3],[1,4],[5,4],[5,5],[14,5],[5,6],[14,6]," + 
        "[5,7],[14,7],[23,7],[1,8],[14,8],[23,8],[27,8],[1,9],[14,9],[23,9],[1,10],[17,10],[23,10]," + 
        "[1,11],[17,11],[23,11],[12,12],[23,12],[12,13],[23,13],[10,14],[19,14],[10,15],[1,16],[8,16]," + 
        "[19,16],[1,17],[8,17],[19,17],[1,18],[16,18],[19,18],[28,18],[1,19],[19,19],[28,19],[19,20]," + 
        "[21,20],[28,20],[6,21],[21,21],[28,21],[13,22],[21,22],[28,22],[1,23],[13,23],[28,23],[1,24]," + 
        "[13,24],[18,24],[21,24],[28,24],[1,25],[18,25],[26,25],[28,25],[1,26],[18,26],[26,26],[28,26]," + 
        "[1,27],[16,27],[26,27],[28,27],[16,28],[28,28],[1,28]", 
        board.getLadders()
    );
    assertEquals(
        "[24,6],[25,6],[26,6],[27,6],[28,6],[16,8],[17,8],[18,8],[19,8],[20,8],[26,14],[27,14]," + 
        "[28,14],[1,15],[2,15],[3,15],[4,15],[15,15],[16,15],[17,15],[18,15],[20,16],[21,16],[22,16]," + 
        "[23,16],[24,16],[25,16],[1,22],[2,22],[3,22],[4,22],[5,22],[6,22],[7,22],[8,22],[9,22]," + 
        "[10,22],[11,22],[12,22],[22,22],[23,22],[24,22],[25,22],[26,22],[23,25],[24,25],[25,25]," + 
        "[2,27],[3,27],[4,27],[5,27],[14,28],[15,28],[17,28],[18,28],[19,28],[20,28]", 
        board.getPipes()
    );
    assertEquals("[8,12]", board.getDoors());
    assertEquals("[18,6]", board.getKeys());
    assertEquals("[0,0],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[8,0],[9,0],[10,0],[11,0],[12,0],[13,0],[14,0],[15,0],[16,0],[17,0],[18,0],[19,0],[20,0],[21,0],[22,0],[23,0],[24,0],[25,0],[26,0],[27,0],[28,0],[29,0],[0,1],[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1],[11,1],[12,1],[13,1],[14,1],[24,1],[25,1],[26,1],[27,1],[28,1],[29,1],[0,2],[16,2],[17,2],[18,2],[19,2],[20,2],[21,2],[22,2],[29,2],[0,3],[4,3],[5,3],[6,3],[7,3],[9,3],[10,3],[11,3],[12,3],[13,3],[14,3],[24,3],[25,3],[26,3],[27,3],[28,3],[29,3],[0,4],[29,4],[0,5],[6,5],[7,5],[8,5],[9,5],[10,5],[11,5],[12,5],[13,5],[15,5],[16,5],[17,5],[18,5],[19,5],[20,5],[21,5],[22,5],[23,5],[29,5],[0,6],[2,6],[3,6],[4,6],[29,6],[0,7],[6,7],[7,7],[8,7],[9,7],[10,7],[11,7],[12,7],[13,7],[15,7],[27,7],[28,7],[29,7],[0,8],[7,8],[21,8],[22,8],[24,8],[25,8],[26,8],[29,8],[0,9],[4,9],[5,9],[6,9],[7,9],[8,9],[9,9],[12,9],[13,9],[15,9],[16,9],[17,9],[18,9],[19,9],[20,9],[21,9],[29,9],[0,10],[2,10],[3,10],[4,10],[29,10],[0,11],[6,11],[7,11],[8,11],[9,11],[10,11],[11,11],[12,11],[13,11],[14,11],[15,11],[16,11],[24,11],[25,11],[26,11],[27,11],[28,11],[29,11],[0,12],[8,12],[29,12],[0,13],[4,13],[5,13],[6,13],[7,13],[8,13],[9,13],[10,13],[11,13],[17,13],[18,13],[19,13],[20,13],[21,13],[22,13],[24,13],[25,13],[29,13],[0,14],[29,14],[0,15],[5,15],[6,15],[7,15],[8,15],[9,15],[11,15],[19,15],[29,15],[0,16],[2,16],[3,16],[29,16],[0,17],[9,17],[10,17],[11,17],[12,17],[13,17],[14,17],[15,17],[16,17],[17,17],[23,17],[24,17],[25,17],[26,17],[27,17],[28,17],[29,17],[0,18],[2,18],[3,18],[4,18],[5,18],[6,18],[17,18],[18,18],[20,18],[21,18],[22,18],[23,18],[24,18],[25,18],[27,18],[29,18],[0,19],[27,19],[29,19],[0,20],[2,20],[3,20],[4,20],[6,20],[7,20],[8,20],[9,20],[10,20],[11,20],[12,20],[13,20],[14,20],[15,20],[16,20],[17,20],[18,20],[22,20],[23,20],[24,20],[25,20],[26,20],[27,20],[29,20],[0,21],[26,21],[27,21],[29,21],[0,22],[27,22],[29,22],[0,23],[20,23],[21,23],[22,23],[23,23],[24,23],[25,23],[26,23],[27,23],[29,23],[0,24],[10,24],[11,24],[12,24],[14,24],[15,24],[16,24],[17,24],[19,24],[20,24],[27,24],[29,24],[0,25],[2,25],[3,25],[4,25],[5,25],[6,25],[7,25],[8,25],[9,25],[10,25],[19,25],[27,25],[29,25],[0,26],[2,26],[16,26],[17,26],[19,26],[20,26],[21,26],[22,26],[23,26],[24,26],[25,26],[27,26],[29,26],[0,27],[8,27],[9,27],[10,27],[11,27],[12,27],[13,27],[27,27],[29,27],[0,28],[21,28],[22,28],[23,28],[24,28],[25,28],[26,28],[27,28],[29,28],[0,29],[1,29],[2,29],[3,29],[4,29],[5,29],[6,29],[7,29],[8,29],[9,29],[10,29],[11,29],[12,29],[13,29],[14,29],[15,29],[16,29],[17,29],[18,29],[19,29],[20,29],[21,29],[22,29],[23,29],[24,29],[25,29],[26,29],[27,29],[28,29],[29,29]", 
        board.getBarriers(false, [])
    );

    assertEquals(true, board.isBarrierAt(-1, 2));
    assertEquals(true, board.isBarrierAt(5, 25));
    assertEquals(false, board.isBarrierAt(10, 10));

    assertEquals(true, board.isAt(1, 1, Element.BRICK));
    assertEquals(false, board.isAt(5, 5, Element.BRICK));
    assertEquals(true, board.isAt(1, 28, Element.HERO_LADDER));
    assertEquals(false, board.isAt(1, 28, Element.HERO_LEFT));

    assertEquals(false, board.isAt(1, board.size(), Element.STONE));
    assertEquals(true, board.isAt(1, board.size() - 1, Element.STONE));

    assertEquals(Element.STONE, board.getAt(0, 0));
    assertEquals(Element.CLUE_RING, board.getAt(7, 24));
    assertEquals(null, board.getAt(-1, -1));

    assertEquals(
        "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼\n" +
        "☼A$  &   $ @&&~~H~~~~☼☼☼☼☼☼☼H☼\n" +
        "☼H~~~~  ######  H        &H☼H☼\n" +
        "☼H»     &  &&&  ##H#######H☼H☼\n" +
        "☼H#########     & H»  &~~~H☼H☼\n" +
        "☼H&$ &&@&&###H####H##H     ☼H☼\n" +
        "☼H $ &$   && H    & #######☼H☼\n" +
        "☼~~~~~~~~~~~~H    @  H~~~~~☼H☼\n" +
        "☼     H   & $        H@ & »☼H☼\n" +
        "☼ ### #############H H#####☼H☼\n" +
        "☼H       $ & $&    H      &☼H☼\n" +
        "☼H#####         H##H####() (H☼\n" +
        "☼H @ $$ H######### H   ######☼\n" +
        "☼H##    H        & H~~~~~~@&&☼\n" +
        "☼~~~~#####H#   ~~~~X   @@    ☼\n" +
        "☼         H    $   H      ~~~☼\n" +
        "☼   ########H  & ######H##$  ☼\n" +
        "☼       B   H          H     ☼\n" +
        "☼H    ###########H    $H#####☼\n" +
        "☼H###            H     H&&$&$☼\n" +
        "☼H& ######  ##H######» H     ☼\n" +
        "☼H     (      H ~~~~~##H###H ☼\n" +
        "☼    H########H#   $&  H&&&##☼\n" +
        "☼ ###H        H   +     ~~~~~☼\n" +
        "☼  $&H########H#########$    ☼\n" +
        "☼H   H    &    $ &$@         ☼\n" +
        "☼H  ####H######         #####☼\n" +
        "☼H      H      H#######H@   &☼\n" +
        "☼##############H       H#####☼\n" +
        "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼\n", 
        board.boardAsString()
    );

    assertEquals("Board:\n" +
        "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼\n" +
        "☼A$  &   $ @&&~~H~~~~☼☼☼☼☼☼☼H☼\n" +
        "☼H~~~~  ######  H        &H☼H☼\n" +
        "☼H»     &  &&&  ##H#######H☼H☼\n" +
        "☼H#########     & H»  &~~~H☼H☼\n" +
        "☼H&$ &&@&&###H####H##H     ☼H☼\n" +
        "☼H $ &$   && H    & #######☼H☼\n" +
        "☼~~~~~~~~~~~~H    @  H~~~~~☼H☼\n" +
        "☼     H   & $        H@ & »☼H☼\n" +
        "☼ ### #############H H#####☼H☼\n" +
        "☼H       $ & $&    H      &☼H☼\n" +
        "☼H#####         H##H####() (H☼\n" +
        "☼H @ $$ H######### H   ######☼\n" +
        "☼H##    H        & H~~~~~~@&&☼\n" +
        "☼~~~~#####H#   ~~~~X   @@    ☼\n" +
        "☼         H    $   H      ~~~☼\n" +
        "☼   ########H  & ######H##$  ☼\n" +
        "☼       B   H          H     ☼\n" +
        "☼H    ###########H    $H#####☼\n" +
        "☼H###            H     H&&$&$☼\n" +
        "☼H& ######  ##H######» H     ☼\n" +
        "☼H     (      H ~~~~~##H###H ☼\n" +
        "☼    H########H#   $&  H&&&##☼\n" +
        "☼ ###H        H   +     ~~~~~☼\n" +
        "☼  $&H########H#########$    ☼\n" +
        "☼H   H    &    $ &$@         ☼\n" +
        "☼H  ####H######         #####☼\n" +
        "☼H      H      H#######H@   &☼\n" +
        "☼##############H       H#####☼\n" +
        "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼\n" +
        "\n" +
        "Hero at: [1,28]\n" +
        "Other heroes at: [[21,9],[26,21],[19,25],[2,26]]\n" +
        "Enemy heroes at: []\n" +
        "Robbers at: [[19,15],[25,18],[7,8],[24,18],[27,18]]\n" +
        "Mask potions at: []\n" +
        "Keys at: [[18,6]]\n", board.toString());
}

const boardContainsTest = () => {
    var board = new Board(
        "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
        "☼A$  &   $ @&&~~H~~~~☼☼☼☼☼☼☼H☼" +
        "☼H~~~~  ######  H        &H☼H☼" +
        "☼H»     &  &&&  ##H#######H☼H☼" +
        "☼H#########     & H»  &~~~H☼H☼" +
        "☼H&$ &&@&&###H####H##H     ☼H☼" +
        "☼H $ &$   && H    & #######☼H☼" +
        "☼~~~~~~~~~~~~H    @  H~~~~~☼H☼" +
        "☼     H   & $        H@ & »☼H☼" +
        "☼ ### #############H H#####☼H☼" +
        "☼H       $ & $&    H      &☼H☼" +
        "☼H#####         H##H####() (H☼" +
        "☼H @ $$ H######### H   ######☼" +
        "☼H##    H        & H~~~~~~@&&☼" +
        "☼~~~~#####H#   ~~~~X   @@    ☼" +
        "☼         H    $   H      ~~~☼" +
        "☼   ########H  & ######H##$  ☼" +
        "☼       B   H          H     ☼" +
        "☼H    ###########H    $H#####☼" +
        "☼H###            H     H&&$&$☼" +
        "☼H& ######  ##H######» H     ☼" +
        "☼H     (      H ~~~~~##H###H ☼" +
        "☼    H########H#   $&  H&&&##☼" +
        "☼ ###H        H   +     ~~~~~☼" +
        "☼  $&H########H#########$    ☼" +
        "☼H   H    &    $ &$@         ☼" +
        "☼H  ####H######         #####☼" +
        "☼H      H      H#######H@   &☼" +
        "☼##############H       H#####☼" +
        "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼"
    );

    const visitedPointsList = [new Point(1,2), new Point(2,4)];
    assertEquals(true, board.contains(visitedPointsList, new Point(2,4)));
    assertEquals(false, board.contains(visitedPointsList, new Point(2,5)));
}

const modifyBoardTest = () => {
    var board = new Board(
        "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
        "☼A$  &   $ @&&~~H~~~~☼☼☼☼☼☼☼H☼" +
        "☼H~~~~  ######  H        &H☼H☼" +
        "☼H»     &  &&&  ##H#######H☼H☼" +
        "☼H#########     & H»  &~~~H☼H☼" +
        "☼H&$ &&@&&###H####H##H     ☼H☼" +
        "☼H $ &$   && H    & #######☼H☼" +
        "☼~~~~~~~~~~~~H    @  H~~~~~☼H☼" +
        "☼     H   & $        H@ & »☼H☼" +
        "☼ ### #############H H#####☼H☼" +
        "☼H       $ & $&    H      &☼H☼" +
        "☼H#####         H##H####() (H☼" +
        "☼H @ $$ H######### H   ######☼" +
        "☼H##    H        & H~~~~~~@&&☼" +
        "☼~~~~#####H#   ~~~~X   @@    ☼" +
        "☼         H    $   H      ~~~☼" +
        "☼   ########H  & ######H##$  ☼" +
        "☼       B   H          H     ☼" +
        "☼H    ###########H    $H#####☼" +
        "☼H###            H     H&&$&$☼" +
        "☼H& ######  ##H######» H     ☼" +
        "☼H     (      H ~~~~~##H###H ☼" +
        "☼    H########H#   $&  H&&&##☼" +
        "☼ ###H        H   +     ~~~~~☼" +
        "☼  $&H########H#########$    ☼" +
        "☼H   H    &    $ &$@         ☼" +
        "☼H  ####H######         #####☼" +
        "☼H      H      H#######H@   &☼" +
        "☼##############H       H#####☼" +
        "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼"
    );

    const stone = board.getAt(0,0);
    assertEquals(Element.STONE, stone);
    board.modifyBoardAt(0,0, Element.BRICK);
    const brick = board.getAt(0,0);
    assertEquals(Element.BRICK, brick);
    //assertEquals(false, board.contains(visitedPointsList, new Point(2,5)));
}


module.exports = {assertEquals, baseTests};